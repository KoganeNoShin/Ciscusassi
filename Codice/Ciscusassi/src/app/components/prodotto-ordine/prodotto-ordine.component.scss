.plate {
	display: flex;
	flex-direction: row;
	gap: 2rem;
	padding: 2rem;
	text-align: left;
	justify-content: center;
	align-items: center;
	width: 100vw;
	height: fit-content;
	box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.3);
}

.plateInfo {
	display: flex;
	flex-direction: column;
	gap: 1rem;
	text-align: left;
	justify-content: start;
	align-items: start;
	word-wrap: break-word;
	width: 50%;
}

img {
	width: 250px;
	height: 250px;
	border-radius: 100%; // L'immagine deve essere circolare
	object-fit: cover; // L'immagine deve coprire completamente la dimensione
	aspect-ratio: 1/1; // L'immagine deve essere un quadrato
}

@media (max-width: 1024px) {
	img {
		width: 50%;
		max-width: 50%;
		height: auto;
	}

	.plateInfo {
		align-items: center !important;
	}
}

@media (max-width: 768px) {
	.plate,
	.plate_giorno {
		display: flex;
		flex-direction: column;
	}

	.plateInfo {
		width: 100%;
	}
}

@media (min-width: 1024px) {
	img {
		width: 12%;
		max-width: 12%;
		height: auto;
	}
}

ion-button {
	--border-radius: 10px;
	font-size: 1rem;
}

.button-group {
	display: flex;
	flex-direction: column;
	gap: 10px;
	margin-top: 10px;
}

.circle {
	width: 40px;
	height: 40px;
	min-width: 40px;
	min-height: 40px;
	border-radius: 50%;
	margin-bottom: 10px;
	box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.3);
	animation: pulse 2s ease-in-out infinite; // Animazione di puslsazione
}

// Keyframe dell'animazione
@keyframes pulse {
	0% {
		transform: scale(1);
		opacity: 1;
	}
	50% {
		transform: scale(1.2); // Allarghiamo leggermente il cerchietto
		opacity: 0.8; // Lo rendiamo leggermente meno opaco
	}
	100% {
		transform: scale(1);
		opacity: 1;
	}
}

// In base allo stato di lavorazione del cerchio, cambiamo colore

.non-lavorazione {
	background-color: var(--ion-color-rosso);
}

.in-lavorazione {
	background-color: var(--ion-color-arancione);
}

.in-consegna {
	background-color: var(--ion-color-celeste);
}

.consegnato {
	background-color: var(--ion-color-verdechiaro);
}

.bottoni-chef {
	display: flex;
	flex-direction: column;
}

.bottoni-cameriere {
	display: flex;
	flex-direction: column;
}

// Colori di sfondo del componente in base al ruolo

.chef {
	background-color: var(--ion-color-verdechiaro);
}

.cameriere {
	background-color: var(--ion-color-verdechiaro);
}

.cliente {
	background-color: var(--ion-color-senape);
}

// Checkbox della romana

ion-checkbox {
	--color: var(--ion-color-bianco); // Colore del testo
	--size: 32px; // Dimensione della checkbox
	font-size: 20px; // Dimensione del testo

	--checkbox-background: var(
		--ion-color-bianco
	); // Lo sfondo della checkbox sarà bianco

	--checkbox-background-checked: var(
		--ion-color-verdechiaro
	); // E se spuntata diventerà verdechiaro
}

/** 
 * Tramite lo pseudo-elemento ::part prendiamo dallo shadowdom il container della checkbox
 * e rendiamo il suo sfondo verdechiaro in base a se la checkbox è stata selezionata
 */
ion-checkbox.selected::part(container) {
	border: 3px solid var(--ion-color-verdechiaro);
}

/** 
 * Rendiamo il container della checkbox circolare
 */
ion-checkbox::part(container) {
	border-radius: 100%;
}

/** 
 * Tramite lo pseudo-elemento ::part prendiamo dallo shadowdom la spunta che,
 * siccome lo sfondo è verde, la dobbiamo fare diventare bianca
 */
ion-checkbox::part(mark) {
	stroke: white;
	transform: scale(0.7) !important;

	// L'origine della trasformazione (scale) deve essere centrale,
	// in modo tale che l'icona rimanga ben centrata
	transform-origin: center;

	display: flex;
}

/** 
 * Tramite lo pseudo-elemento ::part prendiamo dallo shadowdom
 * la label che ridimensioniamo e coloriamo di bianco
 */
ion-checkbox::part(label) {
	color: var(--ion-color-bianco);

	font-size: 2rem; /* Ridondanza utile per compatibilità */
	padding: 5px;
}
